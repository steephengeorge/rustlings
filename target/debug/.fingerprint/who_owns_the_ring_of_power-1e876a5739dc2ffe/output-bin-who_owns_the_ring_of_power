{"message":"this looks like you are trying to swap `sam` and `frodo`","code":{"code":"clippy::almost_swapped","explanation":null},"level":"error","spans":[{"file_name":"Understanding Ownership\\What is ownership\\Who Owns the One Ring\\src\\main.rs","byte_start":539,"byte_end":575,"line_start":22,"line_end":23,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    let sam = frodo;","highlight_start":5,"highlight_end":21},{"text":"    let frodo = sam;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"or maybe you should use `std::mem::replace`?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[deny(clippy::almost_swapped)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"Understanding Ownership\\What is ownership\\Who Owns the One Ring\\src\\main.rs","byte_start":539,"byte_end":575,"line_start":22,"line_end":23,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    let sam = frodo;","highlight_start":5,"highlight_end":21},{"text":"    let frodo = sam;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"std::mem::swap(&mut sam, &mut frodo)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this looks like you are trying to swap `sam` and `frodo`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mUnderstanding Ownership\\What is ownership\\Who Owns the One Ring\\src\\main.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let sam = frodo;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let frodo = sam;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|___________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try: `std::mem::swap(&mut sam, &mut frodo)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: or maybe you should use `std::mem::replace`?\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[deny(clippy::almost_swapped)]` on by default\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
